/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package UI;
import java.util.ArrayList;
import java.util.List;
import javax.swing.table.DefaultTableModel;
import model.City;
import model.Community;
import model.CredentialDirectory;
import model.MainSystem;
import model.Crudops;
import model.Hospital;
import model.House;
import UI.CityAdminCreateJPanel;
import java.awt.Dimension;
import javax.swing.JOptionPane;

/**
 *
 * @author arthy
 */
public class HospAdminCreateJPanel extends javax.swing.JPanel {

    /**
     * Creates new form HospAdminCreateJPanel
     */
    Crudops crudops1;
    CredentialDirectory allcredentials;
    City city1;
    Community community;
    MainSystem mainSystem;
    public HospAdminCreateJPanel(MainSystem mainSystem,CredentialDirectory allcredentials) {
        initComponents();
        this.crudops1 = crudops1;
        this.allcredentials = allcredentials;
        this.mainSystem = mainSystem;
        this.city1 = city1;
        //this.community = city1.getCommunity();
        //System.out.println("city1"+city1);
        popcity();
        popcomm();
//        try{
//            if(allcredentials.getCredential().get(allcredentials.getCredential().size()-1).getRole().equals("Hospital Admin")){
//                System.out.println("COMMUNITY ADMIN HAS LOGGED IN");
//                lblCity7.setVisible(false);
//                lblCity8.setVisible(false);
//                lblCity4.setVisible(false);
//                lblCity9.setVisible(false);
//                comboBoxCity1.setVisible(false);
//                txtcityid.setVisible(false);
//                comboBoxCommunity1.setVisible(false);
//                txtcommid.setVisible(false);
//                txtHosp1.setSize(64, 22);
//                txtHosp1.setPreferredSize(new Dimension(64,22));
//            }
//        }
//        catch(Exception e){
//            System.out.println("CHILL ");
//            //JOptionPane.showMessageDialog(this, "Modify Communities");
//        }        
        
    }
    

    
    public boolean rolecheck(){
        MainJFrame mj = new MainJFrame();
        String password;
        String username;
        String role;
        password = "fd2556b9dd";
        username = "admin";
        role = mj.getrole();
        boolean b1 =  allcredentials.checkSysAdminCred(username, password, role);
        
        return b1;
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        comboBoxCity = new javax.swing.JComboBox<>();
        lblCity = new javax.swing.JLabel();
        lblCity1 = new javax.swing.JLabel();
        comboBoxCommunity = new javax.swing.JComboBox<>();
        lblCity2 = new javax.swing.JLabel();
        txtHosp = new javax.swing.JTextField();
        lblCity3 = new javax.swing.JLabel();
        txtHospid = new javax.swing.JTextField();
        btncreate = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblRecords = new javax.swing.JTable();
        lblCity4 = new javax.swing.JLabel();
        comboBoxCommunity1 = new javax.swing.JComboBox<>();
        lblCity5 = new javax.swing.JLabel();
        txtHosp1 = new javax.swing.JTextField();
        lblCity6 = new javax.swing.JLabel();
        txtHospid1 = new javax.swing.JTextField();
        comboBoxCity1 = new javax.swing.JComboBox<>();
        lblCity7 = new javax.swing.JLabel();
        lblCity8 = new javax.swing.JLabel();
        txtcityid = new javax.swing.JTextField();
        lblCity9 = new javax.swing.JLabel();
        txtcommid = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        btnpopulate = new javax.swing.JButton();
        btnedit = new javax.swing.JButton();

        setBackground(new java.awt.Color(255, 255, 255));

        comboBoxCity.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        comboBoxCity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboBoxCityActionPerformed(evt);
            }
        });

        lblCity.setText("Select City*");

        lblCity1.setText("Select Community*");

        comboBoxCommunity.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        comboBoxCommunity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboBoxCommunityActionPerformed(evt);
            }
        });

        lblCity2.setText("Hospital Name");

        lblCity3.setText("Hospital ID");

        txtHospid.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtHospidKeyTyped(evt);
            }
        });

        btncreate.setText("Create Record");
        btncreate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btncreateActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 36)); // NOI18N
        jLabel1.setText("Hospital ");

        jLabel2.setText("Create Hospitals ");

        tblRecords.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "City", "City ID", "Communtiy", "Community ID", "Hospital", "Hospital ID"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.Long.class, java.lang.String.class, java.lang.Long.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblRecords);

        lblCity4.setText("Community*");

        comboBoxCommunity1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        comboBoxCommunity1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboBoxCommunity1ActionPerformed(evt);
            }
        });

        lblCity5.setText("Hospital Name");

        lblCity6.setText("Hospital ID");

        txtHospid1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtHospid1KeyTyped(evt);
            }
        });

        comboBoxCity1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        comboBoxCity1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboBoxCity1ActionPerformed(evt);
            }
        });

        lblCity7.setText("City*");

        lblCity8.setText("City ID");

        lblCity9.setText("CommunityID");

        jButton1.setText("View");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Delete");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        btnpopulate.setText("Populate Table");
        btnpopulate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnpopulateActionPerformed(evt);
            }
        });

        btnedit.setText("Edit");
        btnedit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btneditActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(493, 493, 493))
            .addGroup(layout.createSequentialGroup()
                .addGap(209, 209, 209)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblCity)
                    .addComponent(lblCity1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(comboBoxCommunity, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(comboBoxCity, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(52, 52, 52)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblCity2)
                    .addComponent(lblCity3))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtHospid, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtHosp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(468, 468, 468)
                        .addComponent(btncreate))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(484, 484, 484)
                        .addComponent(jLabel2))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(23, 23, 23)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 655, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(157, 157, 157)
                                .addComponent(jButton1)
                                .addGap(27, 27, 27)
                                .addComponent(jButton2)
                                .addGap(18, 18, 18)
                                .addComponent(btnpopulate)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(54, 54, 54)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblCity7)
                                    .addComponent(lblCity4)
                                    .addComponent(lblCity5)
                                    .addComponent(lblCity6)
                                    .addComponent(lblCity9)
                                    .addComponent(lblCity8))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtcityid, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtcommid, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtHospid1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtHosp1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(comboBoxCommunity1, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(comboBoxCity1, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnedit)
                                .addGap(42, 42, 42)))))
                .addContainerGap(139, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {comboBoxCity, lblCity});

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {comboBoxCommunity, txtHosp, txtHospid});

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {comboBoxCity1, comboBoxCommunity1, txtHosp1, txtHospid1, txtcityid, txtcommid});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addGap(23, 23, 23)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(comboBoxCity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblCity))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblCity1)
                            .addComponent(comboBoxCommunity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblCity2)
                            .addComponent(txtHosp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblCity3)
                            .addComponent(txtHospid, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(29, 29, 29)
                .addComponent(btncreate)
                .addGap(41, 41, 41)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 246, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton1)
                            .addComponent(jButton2)
                            .addComponent(btnpopulate)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(comboBoxCity1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblCity7))
                        .addGap(15, 15, 15)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblCity8)
                            .addComponent(txtcityid, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(21, 21, 21)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblCity4)
                            .addComponent(comboBoxCommunity1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblCity9)
                            .addComponent(txtcommid, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblCity5)
                            .addComponent(txtHosp1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblCity6)
                            .addComponent(txtHospid1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(19, 19, 19)
                        .addComponent(btnedit)))
                .addContainerGap(42, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {comboBoxCity, lblCity});

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {txtHosp, txtHospid});

    }// </editor-fold>//GEN-END:initComponents

    private void btncreateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btncreateActionPerformed
        // TODO add your handling code here:
        //comboBoxCity.getSelectedItem().toString().length() == 0 || comboBoxCommunity.getSelectedItem().toString().length() == 0 ||
        if( comboBoxCity.getSelectedItem().toString().length() != 0 || comboBoxCommunity.getSelectedItem().toString().length() != 0 ||txtHosp.getText().length() != 0 || txtHospid.getText().length() != 0 )
        {    String hospital1 = txtHosp.getText();
            int Hospitalid = Integer.valueOf(txtHospid.getText());
            String Comm = comboBoxCommunity.getSelectedItem().toString();
            String ct = comboBoxCity.getSelectedItem().toString();
            System.out.println("YOUR COMBO BOX COMM is " + Comm);
    //        Hospital hsp = mainSystem.addnewCity().addNewHosp();
    //        hsp.setHospitalName(hospital1);
    //        hsp.setHospitalId(Hospitalid);

            for(City ct1 : mainSystem.getAllcities()){
                if(ct1.checkHospid(Hospitalid)){
                    JOptionPane.showMessageDialog(this, "The ID is already in use");
                }else{
                    Hospital hosp = ct1.addNewHosp();
                    hosp.setHospitalName(hospital1);
                    hosp.setHospitalId(Hospitalid);
                    Community comm = new Community();
                    comm.setCommunityname(Comm);
                    comm.setZipcode(WIDTH);
                    hosp.setCommunity(comm);
                }

            }
            txtHospid.setText("");   
            txtHosp.setText("");        
            comboBoxCommunity.setSelectedIndex(0);
            comboBoxCity.setSelectedIndex(0);
        }else{
                        
            JOptionPane.showMessageDialog(this, "Please Fill All The Fields");
        }
        
        
    }//GEN-LAST:event_btncreateActionPerformed

    private void btnpopulateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnpopulateActionPerformed
        // TODO add your handling code here:
        popTable();
    }//GEN-LAST:event_btnpopulateActionPerformed

    private void comboBoxCommunity1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboBoxCommunity1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_comboBoxCommunity1ActionPerformed

    private void comboBoxCity1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboBoxCity1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_comboBoxCity1ActionPerformed

    private void comboBoxCommunityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboBoxCommunityActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_comboBoxCommunityActionPerformed

    private void comboBoxCityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboBoxCityActionPerformed
        // TODO add your handling code here:
        //        MainSystem ms = new MainSystem();

        //        List myList = new ArrayList();
        //        for(MainSystem Cs:crudops1.getCrudops1()){
            //            myList.add(Cs.getCity().getCityname());
            //            comboBoxCity.addItem(Cs.getCity().getCityname());
            //        }
        //        System.out.println("NOS OF CITIES "+myList.size());
    }//GEN-LAST:event_comboBoxCityActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        int SelectedRow = tblRecords.getSelectedRow();
        if(SelectedRow<0){
            JOptionPane.showMessageDialog(this, "Please Select a row");
        }else{
            DefaultTableModel m2 = (DefaultTableModel)tblRecords.getModel();
            City SelectedRecords = (City) m2.getValueAt(SelectedRow, 0);
            txtcityid.setText(String.valueOf(SelectedRecords.getCityId()));
            popcity1(SelectedRecords.getCityname());
            for(City ct1 : mainSystem.getAllcities()){
                int i = SelectedRow; 
                popcomm1( ct1.getAllcommunities().get(i).getCommunityname());
                txtcommid.setText(String.valueOf(ct1.getAllcommunities().get(i).getZipcode()));
                //row[2] = ct1.getAllcommunities().get(i).getCommunityname();
                txtHosp1.setText(ct1.getAllhospitals().get(i).getHospitalName());
                txtHospid1.setText(String.valueOf(ct1.getAllhospitals().get(i).getHospitalId()));               
            }            
//            for(Community comm1 : SelectedRecords.getAllcommunities()){
//                popcomm1( comm1.getCommunityname());
//                txtcommid.setText(String.valueOf(comm1.getZipcode()));
//                for(Hospital hosp : SelectedRecords.getAllhospitals()){
//                    txtHosp1.setText(hosp.getHospital`Name());
//                    txtHospid1.setText(String.valueOf(hosp.getHospitalId()));
//                    //System.out.println("TABLE COMSM" + hosp.getHospitalName());
//                }
//            }
              
            
            

        }        
    }//GEN-LAST:event_jButton1ActionPerformed

    private void btneditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btneditActionPerformed
        // TODO add your handling code here:
    int SelectedRow = tblRecords.getSelectedRow();
        if(SelectedRow<0){
            JOptionPane.showMessageDialog(this, "Please Select a row");
        }else{
            if(comboBoxCity1.getSelectedItem().toString().length() == 0 || comboBoxCommunity1.getSelectedItem().toString().length() == 0 || txtHosp1.getText().length() == 0 || txtHospid.getText().length() == 0 )
            {    
                DefaultTableModel m2 = (DefaultTableModel)tblRecords.getModel();
                //System.out.println(m2);
                City SelectedRecords = (City) m2.getValueAt(SelectedRow, 0);
                //ArrayList<House> searchHouse = new ArrayList();
                for(Hospital ct1 : SelectedRecords.getAllhospitals()){
                    ArrayList<Hospital> searchComm = SelectedRecords.searchHospital(ct1.getHospitalName());
                    searchComm.get(0).setHospitalName(txtHosp1.getText());
                    searchComm.get(0).setHospitalId(Integer.valueOf(txtHospid1.getText()));
                }            

    //            SelectedRecords.getHse().setHouseno(Integer.valueOf(txtCityid1.getText()));                            
                JOptionPane.showMessageDialog(this, "Data has been updated");      
            }else{
                JOptionPane.showMessageDialog(this, "Please Fill all the fields");
            }
        }
    }//GEN-LAST:event_btneditActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        boolean b1 = rolecheck();
        System.out.println("ONLY ADMIN CAN DO THIS " + b1);
        int SelectedRow = tblRecords.getSelectedRow();
        if(SelectedRow<0){
            JOptionPane.showMessageDialog(this, "Please select a row");
            return;
        }
        if(b1){
            DefaultTableModel m2 = (DefaultTableModel)tblRecords.getModel();
            City SelectedRecords = (City) m2.getValueAt(SelectedRow, 0);   
            SelectedRecords.deleteHospital(SelectedRecords.getAllhospitals().get(SelectedRow));
            JOptionPane.showMessageDialog(this,"Selected row has been deleted");
            popTable();                  
        } 
        
        
    }//GEN-LAST:event_jButton2ActionPerformed

    private void txtHospidKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtHospidKeyTyped
        // TODO add your handling code here:
        if (!Character.isDigit(evt.getKeyChar())){
            evt.consume();
        }        
    }//GEN-LAST:event_txtHospidKeyTyped

    private void txtHospid1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtHospid1KeyTyped
        // TODO add your handling code here:
        if (!Character.isDigit(evt.getKeyChar())){
            evt.consume();
        }        
    }//GEN-LAST:event_txtHospid1KeyTyped


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btncreate;
    private javax.swing.JButton btnedit;
    private javax.swing.JButton btnpopulate;
    private javax.swing.JComboBox<String> comboBoxCity;
    private javax.swing.JComboBox<String> comboBoxCity1;
    private javax.swing.JComboBox<String> comboBoxCommunity;
    private javax.swing.JComboBox<String> comboBoxCommunity1;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblCity;
    private javax.swing.JLabel lblCity1;
    private javax.swing.JLabel lblCity2;
    private javax.swing.JLabel lblCity3;
    private javax.swing.JLabel lblCity4;
    private javax.swing.JLabel lblCity5;
    private javax.swing.JLabel lblCity6;
    private javax.swing.JLabel lblCity7;
    private javax.swing.JLabel lblCity8;
    private javax.swing.JLabel lblCity9;
    private javax.swing.JTable tblRecords;
    private javax.swing.JTextField txtHosp;
    private javax.swing.JTextField txtHosp1;
    private javax.swing.JTextField txtHospid;
    private javax.swing.JTextField txtHospid1;
    private javax.swing.JTextField txtcityid;
    private javax.swing.JTextField txtcommid;
    // End of variables declaration//GEN-END:variables
    public void popcity(){
    comboBoxCity.removeAllItems();
    comboBoxCity.addItem("");    
    
    for(City ct : mainSystem.getAllcities()){
          comboBoxCity.addItem(ct.getCityname());
          System.out.println("CITIES ARE "+ ct.getCityname());
    }      
    }
    
    
    public void popcomm(){  
    comboBoxCommunity.removeAllItems();
    comboBoxCommunity .addItem("");
    for(City ct : mainSystem.getAllcities()){
        for(Community ct2 : ct.getAllcommunities()){
            comboBoxCommunity .addItem(ct2.getCommunityname());   
        }
      }      
    }    

    public void popcity1(String city){
    comboBoxCity1.removeAllItems(); 
    comboBoxCity1.addItem(city);  
    for(City ct : mainSystem.getAllcities()){
          if(ct.getCityname().equals(city)){
              System.out.println("NO");
          }else{
            comboBoxCity1.addItem(ct.getCityname());
            System.out.println("CITIES ARE "+ ct.getCityname());              
          }

    }      
}
    public void popcomm1(String comm1){  
    comboBoxCommunity1.removeAllItems();
    comboBoxCommunity1 .addItem(comm1);
    for(City ct : mainSystem.getAllcities()){
        for(Community ct2 : ct.getAllcommunities()){
            if(ct2.getCommunityname().equals(comm1)){
                System.out.println("NO");
              }else{
                comboBoxCommunity1.addItem(ct2.getCommunityname());
                //System.out.println("CITIES ARE "+ ct.getCityname());              
              }            
            
        }
      }      
    }    
    
    
    
private void popTable() {
    //throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    tblRecords.putClientProperty("terminateEditOnFocusLost", Boolean.TRUE);
    DefaultTableModel m1 = (DefaultTableModel)tblRecords.getModel();
    m1.setRowCount(0);
//    for(City ct1 : mainSystem.getAllcities()){
//        for (int i = 0; i < ct1.getAllcommunities().size(); ++i) {          
//            Object[] row = new Object[6];
//            row[0] = ct1;
//            row[1] = ct1.getCityId();
//            row[2] = ct1.getAllcommunities().get(i).getCommunityname();
//            row[3] = ct1.getAllcommunities().get(i).getZipcode();
//            row[4] = ct1.getAllhospitals().get(i).getHospitalName();
//            row[5] = ct1.getAllhospitals().get(i).getHospitalId();
//            m1.addRow(row);
//        }   
//    }    
//        for(City ct1 : mainSystem.getAllcities()){
//            System.out.println("BEFORE FOR LOOP " + ct1.getAllhospitals().size());
//            for (int i = 0; i < ct1.getAllcommunities().size(); ++i) {          
//                Object[] row = new Object[6];
//                row[0] = ct1;
//                row[1] = ct1.getCityId();
//                row[2] = ct1.getAllcommunities().get(i).getCommunityname();
//                row[3] = ct1.getAllcommunities().get(i).getZipcode();
//                row[4] = ct1.getAllhospitals().get(i).getHospitalName();
//                row[5] = ct1.getAllhospitals().get(i).getHospitalId();
//                m1.addRow(row);
//            }   
//        }  
           
//    for(City ct : mainSystem.getAllcities()){
//        for(Community cm : ct.getAllcommunities()){
//            for(Hospital hsp : cm.getAllhospitals()){
//                System.out.println("YOUR COMBO IS " + ct.getCityname() + " " + cm.getCommunityname() + " " + hsp.getHospitalName());
//            }
//        }
//    }  

          
//        for(int k = 0; k <= mainSystem.getAllcities().size();++k){
//            for (int i = 0; i <= mainSystem.getAllcities().get(k).getAllcommunities().size(); ++i) {                  
//                Object[] row = new Object[6];            
//                row[0] = mainSystem.getAllcities().get(k);
//                row[1] = mainSystem.getAllcities().get(k).getCityId();                   
//                row[2] = mainSystem.getAllcities().get(k).getAllcommunities().get(i).getCommunityname();
//                row[3] = mainSystem.getAllcities().get(k).getAllcommunities().get(i).getZipcode();
//                row[4] = mainSystem.getAllcities().get(k).getAllhospitals().get(i).getHospitalName();
//                row[5] = mainSystem.getAllcities().get(k).getAllhospitals().get(i).getHospitalId();
//                m1.addRow(row);
//            }   
//        }          
        
    for(City ct1 : mainSystem.getAllcities()){
        Object[] row = new Object[6];
        row[0] = ct1;
        row[1] = ct1.getCityId();
        System.out.println("WE IN THE FOR LOOP "+ ct1.getCityId());
        for(Hospital com1 : ct1.getAllhospitals()){
            row[2] = com1.getCommunity().getCommunityname();
//            for(Community comm : ct1.searchCommunity(com1.getCommunityname())){
//                row[3] = comm.getZipcode();                
//            }
            row[3] = com1.getCommunity().getZipcode();
            row[4] = com1.getHospitalName();
            row[5] = com1.getHospitalId();           
            m1.addRow(row);    
        }

        }
    }
        

    }